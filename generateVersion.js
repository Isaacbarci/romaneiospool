const fs = require('fs');
const path = require('path');

// Pasta onde o version.json ser√° salvo
const dir = 'public/';

// Cria a pasta se n√£o existir
if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`üìÇ Criada pasta: ${dir}`);
}

// Lista de arquivos monitorados para mudan√ßas
const filesToCheck = ['public/index.html', 'public/image.png', 'public/app.js', 'public/service-worker.js'];

function getLastModifiedTime(files) {
    return Math.max(...files.map(file => {
        if (fs.existsSync(file)) {
            return fs.statSync(file).mtimeMs; // Obt√©m a data da √∫ltima modifica√ß√£o
        }
        return 0;
    }));
}

// Obt√©m o timestamp do √∫ltimo arquivo alterado
const lastModified = getLastModifiedTime(filesToCheck);

// Cria ou atualiza o version.json com o timestamp da √∫ltima altera√ß√£o
const versionData = { version: lastModified };
fs.writeFileSync(path.join(dir, 'version.json'), JSON.stringify(versionData, null, 2));

console.log(`üì¢ Nova vers√£o detectada: ${lastModified}`);
